
{"version":3,"sources":["features/Home/homeAPI.js","features/Home/homeSlice.js","features/Item/ItemCard.jsx","features/Home/Home.jsx","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","index.js"],"names":["fetchProducts","a","fetch","res","json","fetchProductsAsync","createAsyncThunk","response","homeSlice","createSlice","name","initialState","status","data","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","selectProductsData","home","FavouriteButton","props","id","type","className","htmlFor","viewBox","xmlns","fill","fillRule","transform","d","opacity","cx","cy","r","ItemCard","title","imgSrc","price","description","style","width","position","src","alt","objectFit","height","top","left","Home","dispatch","useDispatch","productsData","useSelector","useEffect","map","product","image","NavBar","to","fontSize","exact","path","component","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","increment","decrement","incrementByAmount","actions","store","configureStore","reducer","counter","counterReducer","homeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f72490f1.chunk.js","sourcesContent":["const fetchProducts = async () => {\n    const res = await fetch('https://fakestoreapi.com/products');\n    return res.json();\n}\n\nexport { fetchProducts };","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchProducts } from './homeAPI';\n\nconst initialState = {\n    status: 'idle',\n    data: null,\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const fetchProductsAsync = createAsyncThunk(\n    'home/fetchProducts',\n    async () => {\n        const response = await fetchProducts();\n        // The value we return becomes the `fulfilled` action payload\n        return response;\n    }\n);\n\nexport const homeSlice = createSlice({\n    name: 'home',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // fetchProductsData: (state) => {\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        //     // doesn't actually mutate the state because it uses the Immer library,\n        //     // which detects changes to a \"draft state\" and produces a brand new\n        //     // immutable state based off those changes\n        //     state.value += 1;\n        // },\n        // decrement: (state) => {\n        //     state.value -= 1;\n        // },\n        // // Use the PayloadAction type to declare the contents of `action.payload`\n        // incrementByAmount: (state, action) => {\n        //     state.value += action.payload;\n        // },\n    },\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\n    // including actions generated by createAsyncThunk or in other slices.\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchProductsAsync.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(fetchProductsAsync.fulfilled, (state, action) => {\n                state.status = 'idle';\n                state.data = action.payload;\n            });\n    },\n});\n\n// export const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectProductsData = (state) => state.home.data;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default homeSlice.reducer;\n","import './ItemCard.css'\nimport './FavouriteButton.scss'\n\nconst FavouriteButton = (props) => {\n    const { id } = props;\n    return (\n        <div>\n            <input type=\"checkbox\" className=\"favouriteButton\" id={id} />\n            <label htmlFor={id}>\n                <svg id=\"heart-svg\" viewBox=\"467 392 58 57\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g id=\"Group\" fill=\"none\" fillRule=\"evenodd\" transform=\"translate(467 392)\">\n                        <path d=\"M29.144 20.773c-.063-.13-4.227-8.67-11.44-2.59C7.63 28.795 28.94 43.256 29.143 43.394c.204-.138 21.513-14.6 11.44-25.213-7.214-6.08-11.377 2.46-11.44 2.59z\" id=\"heart\" fill=\"#AAB8C2\" />\n                        <circle id=\"main-circ\" fill=\"#E2264D\" opacity=\"0\" cx=\"29.5\" cy=\"29.5\" r=\"1.5\" />\n\n                        <g id=\"grp7\" opacity=\"0\" transform=\"translate(7 6)\">\n                            <circle id=\"oval1\" fill=\"#9CD8C3\" cx=\"2\" cy=\"6\" r=\"2\" />\n                            <circle id=\"oval2\" fill=\"#8CE8C3\" cx=\"5\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp6\" opacity=\"0\" transform=\"translate(0 28)\">\n                            <circle id=\"oval1\" fill=\"#CC8EF5\" cx=\"2\" cy=\"7\" r=\"2\" />\n                            <circle id=\"oval2\" fill=\"#91D2FA\" cx=\"3\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp3\" opacity=\"0\" transform=\"translate(52 28)\">\n                            <circle id=\"oval2\" fill=\"#9CD8C3\" cx=\"2\" cy=\"7\" r=\"2\" />\n                            <circle id=\"oval1\" fill=\"#8CE8C3\" cx=\"4\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp2\" opacity=\"0\" transform=\"translate(44 6)\">\n                            <circle id=\"oval2\" fill=\"#CC8EF5\" cx=\"5\" cy=\"6\" r=\"2\" />\n                            <circle id=\"oval1\" fill=\"#CC8EF5\" cx=\"2\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp5\" opacity=\"0\" transform=\"translate(14 50)\">\n                            <circle id=\"oval1\" fill=\"#91D2FA\" cx=\"6\" cy=\"5\" r=\"2\" />\n                            <circle id=\"oval2\" fill=\"#91D2FA\" cx=\"2\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp4\" opacity=\"0\" transform=\"translate(35 50)\">\n                            <circle id=\"oval1\" fill=\"#F48EA7\" cx=\"6\" cy=\"5\" r=\"2\" />\n                            <circle id=\"oval2\" fill=\"#F48EA7\" cx=\"2\" cy=\"2\" r=\"2\" />\n                        </g>\n\n                        <g id=\"grp1\" opacity=\"0\" transform=\"translate(24)\">\n                            <circle id=\"oval1\" fill=\"#9FC7FA\" cx=\"2.5\" cy=\"3\" r=\"2\" />\n                            <circle id=\"oval2\" fill=\"#9FC7FA\" cx=\"7.5\" cy=\"2\" r=\"2\" />\n                        </g>\n                    </g>\n                </svg>\n            </label>\n        </div>\n    )\n}\n\nconst ItemCard = (props) => {\n    const { title, imgSrc, description, price, id } = props;\n    return (\n        <div className=\"col-12 col-sm-4 p-sm-5 mt-4 d-flex align-items-stretch\">\n            <div style={{ width: \"100%\", position: \"relative\" }} className=\"item-card\">\n                <img className=\"card-img-top rounded\" src={imgSrc} alt={title} style={{ objectFit: \"scale-down\", height: \"250px\" }} />\n                <div className=\"card-body\">\n                    <div className=\"col-12\">\n                        <strong>{title}</strong>\n                    </div>\n                    <p className=\"card-text\">${price}</p>\n                    <div style={{ position: \"absolute\", top: \"5px\", left: \"-1px\" }}>\n                        <FavouriteButton id={id} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ItemCard;","import { useSelector, useDispatch } from 'react-redux';\nimport { fetchProductsAsync, selectProductsData } from './homeSlice';\nimport { useEffect } from 'react';\nimport ItemCard from '../Item/ItemCard';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const productsData = useSelector(selectProductsData)\n    useEffect(() => {\n        dispatch(fetchProductsAsync())\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"row p-2\" >\n                {productsData ? (\n                    productsData.map(product => <ItemCard\n                        title={product.title}\n                        imgSrc={product.image}\n                        description={product.description}\n                        price={product.price}\n                        key={product.id}\n                        id={product.id} />\n                    )\n                ) : (<div className=\"col-12\">LOADING....</div>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './features/Home/Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport './App.css';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nconst NavBar = () => {\n    return (\n        <Router>\n            <div className=\"container\">\n                <div className=\"row navbar text-decoration-none\">\n                    <div className=\"col-sm-2 col-6\"><Link to=\"/\">REDUX-STORE</Link></div>\n                    <div className=\"offset-2 offset-sm-8 col-sm-1 col-2\"><Link to=\"/\"><i style={{ fontSize: \"1.5rem\" }} className=\"bi bi-heart-fill\"></i></Link></div>\n                    <div className=\"col-sm-1 col-2\"><Link to=\"/\"><i style={{ fontSize: \"1.5rem\" }} className=\"bi bi-cart-fill\"></i></Link></div>\n                </div>\n            </div>\n\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n            </Switch>\n        </Router>\n    );\n}\n\nfunction App() {\n    return <NavBar />\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport homeReducer from '../features/Home/homeSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    home: homeReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
